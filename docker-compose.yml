version: '3.8'

volumes:
  certs:
    driver: local
  esdata01:
    driver: local
  kibanadata:
    driver: local
  logstash01: # Logstash internal data volume
    driver: local
  logdata: # Shared volume for logs (ETL script, monitoring app, and now Logstash)
    driver: local
  csvfiles:
    driver: local

networks:
  elastic:
    driver: bridge

services:
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: kibana\n"\
          "    dns:\n"\
          "      - kibana\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120
    networks:
      - elastic
  es01:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - ES_JAVA_OPTS=-Xms3g -Xmx3g
    mem_limit: ${ES_MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - elastic

  kibana:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    labels:
      co.elastic.logs/module: kibana
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - NODE_OPTIONS=--max_old_space_size=4096
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - KB_JAVA_OPTS=-Xms3g -Xmx3g
    mem_limit: ${KB_MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - elastic
    restart: always

  # Renamed 'scraper' to 'etl_processor' for clarity
  etl_processor:
    build: ./logstash # Assumes Dockerfile here runs main.py
    volumes:
      # Mount shared log volume for writing gdelt_etl.log
      - logdata:/app/logs
      # Mount csvfiles volume for downloading/processing CSVs
      - csvfiles:/app/csv
      # Mount target directory for processed JSON (read by Logstash)
      - ./logstash/logstash_ingest_data:/app/logstash_ingest_data
      # Mount schemas and etl code if needed directly by main.py run inside container
      - ./logstash/schemas:/app/schemas
      - ./logstash/etl:/app/etl
    # Pass necessary environment variables if main.py uses them
    # environment:
    #   - GDELT_LOG_FOLDER=/app/logs
    #   - GDELT_DOWNLOAD_FOLDER=/app/csv
    #   - GDELT_JSON_INGEST_FOLDER=/app/logstash_ingest_data/json
    networks:
      - elastic
    # Depends on ES only if main.py needs to connect (currently doesn't)
    # depends_on:
    #   - es01

  logstash01:
    depends_on:
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy
      # Optional: depends on etl_processor if you want it to start first
      # etl_processor:
      #   condition: service_started # Or a more specific healthcheck if added
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    labels:
      co.elastic.logs/module: logstash
    user: root # Ensure permissions to write logs if needed
    volumes:
      - certs:/usr/share/logstash/certs
      - "logstash01:/usr/share/logstash/data/" # Logstash internal data (e.g., sincedb)
      - "${LOGSTASH_ROOT}/pipeline/:/usr/share/logstash/pipeline/"
      - "${LOGSTASH_ROOT}/logstash.yml:/usr/share/logstash/config/logstash.yml"
      - "${LOGSTASH_ROOT}/template.json:/usr/share/logstash/template.json"
      # Mount the directory Logstash reads JSON from
      - ./logstash/logstash_ingest_data/json:/usr/share/logstash/ingest_json # Example path Logstash pipeline might use
      # Mount Logstash's log directory into the shared 'logdata' volume
      - logdata:/usr/share/logstash/logs/
    mem_limit: ${LS_MEM_LIMIT}
    environment:
      - xpack.monitoring.enabled=false
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://es01:9200
      # Example: Pointing Logstash config to use mounted file explicitly
      # - PATH_CONFIG=/usr/share/logstash/pipeline
    restart: "no" # Keep as "no" if it's meant to run once per data batch
    networks:
      - elastic

  pipeline-monitoring:
    depends_on:
      es01: # Depends on ES to check data existence
        condition: service_healthy
      # Optional: depends on logstash01 if it needs Logstash to be running
      # logstash01:
      #   condition: service_started
    build: ./pipeline-monitoring
    volumes:
      # Mount shared log volume to read ETL and Logstash logs
      - logdata:/app/logs
      # Mount csvfiles volume if patching downloads directly here
      - csvfiles:/app/csv # Changed from ./csv to match etl_processor mount point name
    ports:
      - ${PIPELINE_MONITORING_PORT}:7979
    environment:
      # Pass necessary env vars for ES connection and log paths
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ES_HOST_FOR_APP=es01 # Service name within docker network
      - ES_PORT=9200
      - ES_USER=elastic
      - ES_SCHEME=https
      - PIPELINE_LOG_FOLDER=/app/logs # Internal path within this container
      # Add other env vars if app.py uses them (e.g., GDELT URLs)
    networks:
      - elastic

