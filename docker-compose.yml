volumes:
  certs:
    driver: local
  esdata01:
    driver: local
  kibanadata:
    driver: local
  logstashdata: # Renamed volume from logstash01
    driver: local
  logdata: # Shared volume for logs (ETL script, Logstash, backend API)
    driver: local
  csvfiles: # Volume for downloaded GDELT CSVs (used by ETL)
    driver: local
  # Removed ingestdata volume, using host mount as per user's file

networks:
  elastic:
    driver: bridge

services:
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    # Setup command to create certs and set passwords
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: kibana\n"\
          "    dns:\n"\
          "      - kibana\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120
    networks:
      - elastic

  es01:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - ES_JAVA_OPTS=${ES_JAVA_OPTS:--Xms3g -Xmx3g} # Provide default if not set
    mem_limit: ${ES_MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - elastic

  kibana:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    labels:
      co.elastic.logs/module: kibana
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - NODE_OPTIONS=--max_old_space_size=4096
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200 # Use service name 'es01'
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - KB_JAVA_OPTS=${KB_JAVA_OPTS:--Xms3g -Xmx3g} # Provide default
    mem_limit: ${KB_MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - elastic
    restart: always

  # ETL processor service - Using context from user's file
  etl_processor:
    # Assumes Dockerfile in backend/etl_pipeline/ runs backend/etl_pipeline/main.py
    build: ./backend/etl_pipeline
    volumes:
      - logdata:/app/logs # Shared log volume
      - csvfiles:/app/csv # Input CSV data volume
      # Mount ingest data directory from host (same as user's file)
      - ./backend/etl_pipeline/logstash_ingest_data:/app/logstash_ingest_data
      # Optional: Mount schemas/etl only if NOT copied in Dockerfile
      # These are likely copied during the build process defined in backend/etl_pipeline/Dockerfile
      # - ./backend/etl_pipeline/schemas:/app/schemas
      # - ./backend/etl_pipeline/etl:/app/etl
    environment:
      # Ensure these match what backend/etl_pipeline/main.py expects
      - GDELT_LOG_FOLDER=/app/logs
      - GDELT_DOWNLOAD_FOLDER=/app/csv
      - GDELT_JSON_INGEST_FOLDER=/app/logstash_ingest_data/json # Target dir inside container
      - PYTHONUNBUFFERED=1
      # Add any Spark related ENV VARS needed by the ETL script/Dockerfile
    networks:
      - elastic
    restart: unless-stopped # Or "on-failure"

  # Logstash service - Renamed from logstash01
 
  logstash:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    labels:
      co.elastic.logs/module: logstash
    user: root # May be needed for volume permissions
    volumes: # <<< ONLY ONE volumes key at this level
      # List items indented correctly under the single 'volumes:' key
      - certs:/usr/share/logstash/certs
      - "logstashdata:/usr/share/logstash/data/" # Logstash internal data
      - ./backend/etl_pipeline/pipeline/:/usr/share/logstash/pipeline/  # Mount pipeline dir
      - ./backend/etl_pipeline/logstash.yml:/usr/share/logstash/config/logstash.yml # Mount logstash.yml file
      - ./backend/etl_pipeline/template.json:/usr/share/logstash/template.json # Mount template file
      - ./backend/etl_pipeline/logstash_ingest_data/json:/usr/share/logstash/ingest_json
      - logdata:/usr/share/logstash/logs/
    mem_limit: ${LS_MEM_LIMIT}
    environment:
      - xpack.monitoring.enabled=false
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://es01:9200
      # Example path variable if used in logstash.conf file input plugin
      - LOGSTASH_JSON_INPUT_PATH=/usr/share/logstash/ingest_json
      - LS_JAVA_OPTS=${LS_JAVA_OPTS:--Xms2g -Xmx2g} # Provide default
    restart: unless-stopped
    networks:
      - elastic

  # Backend API Service - Using context from user's file
  backend-api:
    # Assumes Dockerfile in backend/api/ runs backend/api/main.py
    build: ./backend/api
    depends_on:
      es01:
        condition: service_healthy
    volumes:
      - logdata:/app/logs
      - csvfiles:/app/csv # Shared log volume
    ports:
      - "8000:8000"
    environment:
      # Ensure these match names used in backend/api/main.py
      - ELASTIC_USER=${ELASTIC_USER:-elastic}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-changeme}
      - ES_HOST=es01
      - ES_PORT=9200
      - ES_SCHEME=https
      - ES_VERIFY_CERTS=False # Adjust if needed
      - PIPELINE_LOG_FOLDER=/app/logs
      - PYTHONUNBUFFERED=1
    networks:
      - elastic
    restart: unless-stopped

  # NEW Frontend Service using Streamlit
  frontend-app:
    # Assumes Dockerfile in frontend/ runs frontend/analysis.py
    build: ./frontend
    depends_on:
      backend-api: # Frontend needs the backend to be running
         condition: service_started # Use service_healthy if backend gets a healthcheck
    ports:
      - "8501:8501" # Expose Streamlit default port
    environment:
       # Pass the backend URL to the frontend container
       - BACKEND_API_URL=http://backend-api:8000 # Use service name and backend port
       - STREAMLIT_SERVER_PORT=8501
       - PYTHONUNBUFFERED=1
    # No volumes mounted by default unless frontend needs shared logs/data
    networks:
      - elastic
    restart: unless-stopped

# Removed the 'pipeline-monitoring' service definition (already absent in user's provided file)